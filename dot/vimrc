" Make Vim more useful
set nocompatible
" Use the OS clipboard by default (on versions compiled with `+clipboard`)
set clipboard=unnamed
" Allow cursor keys in insert mode
set esckeys
" Optimize for fast terminal connections
set ttyfast
" Add the g flag to search/replace by default
set gdefault
" Use UTF-8 without BOM
set encoding=utf-8 nobomb
" Change mapleader
let mapleader=" "
" Centralize backups, swapfiles and undo history
set backupdir=~/.vim/backups
set directory=~/.vim/swaps
if exists("&undodir")
	set undodir=~/.vim/undo
endif

" Use the most secure cypher for encrypted files
set cm=blowfish2
" Allow unsaved changes in hidden buffers
set hidden
" Respect modeline in files
set modeline
set modelines=4
" Enable per-directory .vimrc files and disable unsafe commands in them
set exrc
set secure
" Enable line numbers
set number

set diffopt=vertical,filler

" Make tabs 2 spaces by default (override in filetypes)
set tabstop=2
set shiftwidth=2

" Use spaces for tabs
set expandtab

" Show “invisible” characters
set listchars=tab:▸\ ,trail:·,extends:❯,precedes:❮
set list

" Highlight searches
set hlsearch
" Ignore case of searches
set ignorecase
" Enable mouse in all modes
set mouse=a
" Disable error bells
set noerrorbells
" Don’t reset cursor to start of line when moving around.
set nostartofline
" Don’t show the intro message when starting Vim
set shortmess=atI
" Show the current mode
set showmode
" Show the filename in the window titlebar
set title
" Start scrolling three lines before the horizontal window border
set scrolloff=3

" When creating new windows, put them below or right of the active window
set splitbelow
set splitright

" Re-read files from the FS if they change and we don't have pending modifications
set autoread

" Round to a column multiple when indenting instead of using a constant number
" of spaces
set shiftround

" Break long lines on whitespace
set linebreak

" Backspace like a normal application
set backspace=indent,eol,start

" Enter inserts a newline from normal mode
nnoremap <cr> o<esc>

" bring up buffer list and waits for number input
nnoremap <leader>l :ls<CR>:b<Space>

" Navigate wrapped lines as if they were real lines
nnoremap k gk
nnoremap j gj
vnoremap k gk
vnoremap j gj

" use jk to exit insert mode
inoremap jk <esc>

" ctrl-s to save
inoremap <C-S>   <esc>:write<CR>
nnoremap <C-S>   :write<CR>

" ctrl-c to quit
inoremap <C-C>   <C-O>:quit<CR>
nnoremap <C-C>   :quit<CR>

nnoremap <leader>h :help<space>

" http://stackoverflow.com/questions/4465095/vim-delete-buffer-without-losing-the-split-window/4468491#4468491
nnoremap <leader>d :bprevious\|bdelete #<CR>
nnoremap <leader>s :w<cr>

" control + vim direction key to navigate windows
noremap <C-J>     <C-W>j
noremap <C-K>     <C-W>k
noremap <C-H>     <C-W>h
noremap <C-L>     <C-W>l

" Clear search highlighting
nnoremap <silent> <leader>/ :noh<cr>

" Reformat text with Q
nnoremap Q gq

" CtrlP
let g:ctrlp_map = '<leader>p'
let g:ctrlp_cmd = 'CtrlPMixed'

" The Silver Searcher (ag)
" search from project root instead of cwd
let g:ag_working_path_mode="r"
let g:ackprg = 'ag --nogroup --nocolor --column'

" ==== NERD tree
" Open the project tree and expose current file in the nerdtree with Ctrl-\
" " calls NERDTreeFind iff NERDTree is active, current window contains a modifiable file, and we're not in vimdiff
function! OpenNerdTree()
  if &modifiable && strlen(expand('%')) > 0 && !&diff
    NERDTreeFind
  else
    NERDTreeToggle
  endif
endfunction
nnoremap <silent> <C-\> :call OpenNerdTree()<CR>
nnoremap <leader>f :call OpenNerdTree()<CR>


" Strip trailing whitespace (,ss)
function! StripWhitespace()
	let save_cursor = getpos(".")
	let old_query = getreg('/')
	:%s/\s\+$//e
	call setpos('.', save_cursor)
	call setreg('/', old_query)
endfunction
noremap <leader>ss :call StripWhitespace()<CR>
" Save a file as root (,W)
noremap <leader>W :w !sudo tee % > /dev/null<CR>

let g:pymode_rope = 0
let g:pymode_lint_ignore = "E501,W,E302,E126,E226"
let g:pymode_folding = 0
let g:pymode_trim_whitespaces = 0


" Reverb keybindings
"
function! GetVisual()
  let reg_save = getreg('"')
  let regtype_save = getregtype('"')
  let cb_save = &clipboard
  set clipboard&
  normal! ""gvy
  let selection = getreg('"')
  call setreg('"', reg_save, regtype_save)
  let &clipboard = cb_save
  return selection
endfunction

"grep the current word using ,k (mnemonic Kurrent)
nnoremap <silent> ,k :Ag <cword><CR>

"grep visual selection
vnoremap ,k :<C-U>execute "Ag " . GetVisual()<CR>

"grep current word up to the next exclamation point using ,K
nnoremap ,K viwf!:<C-U>execute "Ag " . GetVisual()<CR>

"grep for 'def foo'
nnoremap <silent> ,gd :Ag 'def <cword>'<CR>

",gg = Grep! - using Ag the silver searcher
" open up a grep line, with a quote started for the search
nnoremap ,gg :Ag ""<left>

"Grep for usages of the current file
nnoremap ,gcf :exec "Ag " . expand("%:t:r")<CR>


" hit ,f to find the definition of the current class
" this uses ctags. the standard way to get this is Ctrl-]
nnoremap <silent> ,f <C-]>

" use ,F to jump to tag in a vertical split
nnoremap <silent> ,F :let word=expand("<cword>")<CR>:vsp<CR>:wincmd w<cr>:exec("tag ". word)<cr>

nnoremap ,rs :RunItermSpec<cr>
nnoremap ,rl :RunItermSpecLine<cr>
nnoremap ,ss :RunItermSpringSpec<cr>
nnoremap ,sl :RunItermSpringSpecLine<cr>
nnoremap zl :RunItermZeusSpecLine<cr>
nnoremap zs :RunItermZeusSpec<cr>
